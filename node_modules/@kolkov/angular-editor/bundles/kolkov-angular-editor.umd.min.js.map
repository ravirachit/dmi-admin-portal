{"version":3,"sources":["ng://@kolkov/angular-editor/lib/angular-editor.service.ts","ng://@kolkov/angular-editor/lib/config.ts","ng://@kolkov/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","doc","_this","this","saveSelection","getSelection","sel","getRangeAt","rangeCount","savedSelection","selectedText","toString","createRange","document","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","insertHtml","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","removeAllRanges","addRange","executeInNextQueueIteration","callbackFn","timeout","setTimeout","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","tag","class","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","id","split","thumbnail","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","nextNode","node","hasChildNodes","firstChild","nextSibling","parentNode","getRangeSelectedNodes","range","includePartiallySelectedContainers","startContainer","endNode","endContainer","rangeNodes","push","commonAncestorContainer","unshift","getSelectedNodes","nodes","i","len","apply","replaceWithOwnChildren","el","parent","insertBefore","removeChild","removeSelectedElements","tagNames","tagNamesArray","toLowerCase","forEach","nodeType","indexOf","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","sanitize","toolbarPosition","AngularEditorToolbarComponent","r","editorService","htmlMode","linkSelected","block","customClassId","tagMap","BLOCKQUOTE","A","select","buttons","execute","EventEmitter","Object","defineProperty","Boolean","triggerCommand","emit","triggerButtons","e","result","queryCommandState","elementById","getElementById","addClass","removeClass","triggerBlocks","findIndex","x","nodeName","found","y","find","undefined","customClasses","index","Element","className","keys","map","foreColour","queryCommandValue","replace","backColor","insertUrl","prompt","foreColor","setEditorMode","m","toggleEditorModeButton","onFileChanged","event","target","files","type","HttpResponse","body","fileReset","reader","FileReader","onload","fr","readAsDataURL","myInputFile","nativeElement","value","setCustomClass","classId","Component","selector","template","Renderer2","Output","ViewChild","AngularEditorComponent","sanitizer","cdRef","defaultTabIndex","modeVisual","showPlaceholder","disabled","config","viewMode","blur","focus","tabindex","parsedTabIndex","Number","tabIndex","onFocus","onEditorFocus","ngOnInit","ngAfterViewInit","editorToolbar","detectChanges","toggleEditorMode","onContentChange","textArea","innerHTML","exec","onTextAreaFocus","onTextAreaMouseOut","onTextAreaBlur","onTouched","relatedTarget","parentElement","onChange","SecurityContext","HTML","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","refreshView","normalizedValue","setProperty","editorWrapper","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createTextNode","oPre","createElement","setAttribute","oCode","contentEditable","appendChild","querySelectorAll","innerText","selectNodeContents","userSelection","a","focusNode","els","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DomSanitizer","ChangeDetectorRef","Attribute","Input","HostBinding","HostListener","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpEvent} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass} from './config';\n\nexport interface UploadResponse {\n  imageUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEditorService {\n\n  savedSelection: Range | null;\n  selectedText: string;\n  uploadUrl: string;\n\n  constructor(\n    private http: HttpClient,\n    @Inject(DOCUMENT) private doc: any\n  ) { }\n\n  /**\n   * Executed command from editor header buttons exclude toggleEditorMode\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\n    if (commands.includes(command)) {\n      this.doc.execCommand('formatBlock', false, command);\n      return;\n    }\n    this.doc.execCommand(command, false, null);\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  createLink(url: string) {\n    if (!url.includes('http')) {\n      this.doc.execCommand('createlink', false, url);\n    } else {\n      const newUrl = '<a href=\"' + url + '\" target=\"_blank\">' + this.selectedText + '</a>';\n      this.insertHtml(newUrl);\n    }\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    const restored = this.restoreSelection();\n    if (restored) {\n      if (where === 'textColor') {\n        this.doc.execCommand('foreColor', false, color);\n      } else {\n        this.doc.execCommand('hiliteColor', false, color);\n      }\n    }\n  }\n\n  /**\n   * Set font name\n   * @param fontName string\n   */\n  setFontName(fontName: string) {\n    this.doc.execCommand('fontName', false, fontName);\n  }\n\n  /**\n   * Set font size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string) {\n    this.doc.execCommand('fontSize', false, fontSize);\n  }\n\n  /**\n   * Create raw HTML\n   * @param html HTML string\n   */\n  private insertHtml(html: string): void {\n\n    const isHTMLInserted = this.doc.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n  }\n\n  /**\n   * save selection when the editor is focussed out\n   */\n  public saveSelection = (): void => {\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        this.savedSelection = sel.getRangeAt(0);\n        this.selectedText = sel.toString();\n      }\n    } else if (this.doc.getSelection && this.doc.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n  }\n\n  /**\n   * restore selection when the editor is focused in\n   *\n   * saved selection when the editor is focused out\n   */\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (this.doc.getSelection) {\n        const sel = this.doc.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this.doc.getSelection /*&& this.savedSelection.select*/) {\n        // this.savedSelection.select();\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * setTimeout used for execute 'saveSelection' method in next event loop iteration\n   */\n  public executeInNextQueueIteration(callbackFn: (...args: any) => any, timeout = 1e2): void {\n    setTimeout(callbackFn, timeout);\n  }\n\n  /** check any selection is made or not */\n  private checkSelection(): any {\n\n    const selectedText = this.savedSelection.toString();\n\n    if (selectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n    return true;\n  }\n\n  /**\n   * Upload file to uploadUrl\n   * @param file The file\n   */\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\n\n    const uploadData: FormData = new FormData();\n\n    uploadData.append('file', file, file.name);\n\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Insert image with Url\n   * @param imageUrl The imageUrl.\n   */\n  insertImage(imageUrl: string) {\n    this.doc.execCommand('insertImage', false, imageUrl);\n  }\n\n  setDefaultParagraphSeparator(separator: string) {\n    this.doc.execCommand('defaultParagraphSeparator', false, separator);\n  }\n\n  createCustomClass(customClass: CustomClass) {\n    let newTag = this.selectedText;\n    if (customClass) {\n      const tagName = customClass.tag ? customClass.tag : 'span';\n      newTag = '<' + tagName + ' class=\"' + customClass.class + '\">' + this.selectedText + '</' + tagName + '>';\n    }\n    this.insertHtml(newTag);\n  }\n\n  insertVideo(videoUrl: string) {\n    if (videoUrl.match('www.youtube.com')) {\n      this.insertYouTubeVideoTag(videoUrl);\n    }\n    if (videoUrl.match('vimeo.com')) {\n      this.insertVimeoVideoTag(videoUrl);\n    }\n  }\n\n  private insertYouTubeVideoTag(videoUrl: string): void {\n    const id = videoUrl.split('v=')[1];\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\n    const thumbnail = `\n      <div style='position: relative'>\n        <img style='position: absolute; left:200px; top:140px'\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\n        </a>\n      </div>`;\n    this.insertHtml(thumbnail);\n  }\n\n  private insertVimeoVideoTag(videoUrl: string): void {\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\n      const imageUrl = data.thumbnail_url_with_play_button;\n      const thumbnail = `<div>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\n        </a>\n      </div>`;\n      this.insertHtml(thumbnail);\n      sub.unsubscribe();\n    });\n  }\n\n  nextNode(node) {\n    if (node.hasChildNodes()) {\n      return node.firstChild;\n    } else {\n      while (node && !node.nextSibling) {\n        node = node.parentNode;\n      }\n      if (!node) {\n        return null;\n      }\n      return node.nextSibling;\n    }\n  }\n\n  getRangeSelectedNodes(range, includePartiallySelectedContainers) {\n    let node = range.startContainer;\n    const endNode = range.endContainer;\n    let rangeNodes = [];\n\n    // Special case for a range that is contained within a single node\n    if (node === endNode) {\n      rangeNodes = [node];\n    } else {\n      // Iterate nodes until we hit the end container\n      while (node && node !== endNode) {\n        rangeNodes.push( node = this.nextNode(node) );\n      }\n\n      // Add partially selected nodes at the start of the range\n      node = range.startContainer;\n      while (node && node !== range.commonAncestorContainer) {\n        rangeNodes.unshift(node);\n        node = node.parentNode;\n      }\n    }\n\n    // Add ancestors of the range container, if required\n    if (includePartiallySelectedContainers) {\n      node = range.commonAncestorContainer;\n      while (node) {\n        rangeNodes.push(node);\n        node = node.parentNode;\n      }\n    }\n\n    return rangeNodes;\n  }\n\n  getSelectedNodes() {\n    const nodes = [];\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      for (let i = 0, len = sel.rangeCount; i < len; ++i) {\n        nodes.push.apply(nodes, this.getRangeSelectedNodes(sel.getRangeAt(i), true));\n      }\n    }\n    return nodes;\n  }\n\n  replaceWithOwnChildren(el) {\n    const parent = el.parentNode;\n    while (el.hasChildNodes()) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  }\n\n  removeSelectedElements(tagNames) {\n    const tagNamesArray = tagNames.toLowerCase().split(',');\n    this.getSelectedNodes().forEach((node) => {\n      if (node.nodeType === 1 &&\n        tagNamesArray.indexOf(node.tagName.toLowerCase()) > -1) {\n        // Remove the node and replace it with its children\n        this.replaceWithOwnChildren(node);\n      }\n    });\n  }\n}\n","export interface CustomClass {\n  name: string;\n  class: string;\n  tag?: string;\n}\n\nexport interface Font {\n  name: string;\n  class: string;\n}\n\nexport interface AngularEditorConfig {\n  editable?: boolean;\n  spellcheck?: boolean;\n  height?: 'auto' | string;\n  minHeight?: '0' | string;\n  maxHeight?: 'auto' | string;\n  width?: 'auto' | string;\n  minWidth?: '0' | string;\n  translate?: 'yes' | 'now' | string;\n  enableToolbar?: boolean;\n  showToolbar?: boolean;\n  placeholder?: string;\n  defaultParagraphSeparator?: string;\n  defaultFontName?: string;\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | string;\n  uploadUrl?: string;\n  fonts?: Font[];\n  customClasses?: CustomClass[];\n  sanitize?: boolean;\n  toolbarPosition?: 'top' | 'bottom';\n}\n\nexport const angularEditorConfig: AngularEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  maxHeight: 'auto',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  defaultParagraphSeparator: '',\n  defaultFontName: '',\n  defaultFontSize: '',\n  fonts: [\n    {class: 'arial', name: 'Arial'},\n    {class: 'times-new-roman', name: 'Times New Roman'},\n    {class: 'calibri', name: 'Calibri'},\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n  ],\n  uploadUrl: 'v1/image',\n  sanitize: true,\n  toolbarPosition: 'top',\n};\n","import {Component, ElementRef, EventEmitter, Inject, Output, Renderer2, ViewChild} from '@angular/core';\nimport {AngularEditorService} from './angular-editor.service';\nimport {HttpResponse} from '@angular/common/http';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass, Font} from './config';\n\n@Component({\n  selector: 'angular-editor-toolbar',\n  templateUrl: './angular-editor-toolbar.component.html',\n  styleUrls: ['./angular-editor-toolbar.component.scss']\n})\n\nexport class AngularEditorToolbarComponent {\n  id = '';\n  htmlMode = false;\n  showToolbar = true;\n  linkSelected = false;\n  block = 'default';\n  defaultFontId;\n  fontName;\n  fontSize = '5';\n  foreColour;\n  backColor;\n\n  fonts: Font[];\n\n  customClassId = -1;\n  customClasses: CustomClass[];\n  uploadUrl: string;\n\n  tagMap = {\n    BLOCKQUOTE: 'indent',\n    A: 'link'\n  };\n\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\n\n  buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('fileInput') myInputFile: ElementRef;\n\n  public get isLinkButtonDisabled(): boolean {\n    return this.htmlMode || !Boolean(this.editorService.selectedText);\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any\n  ) { }\n\n  /**\n   * Trigger command from editor header buttons\n   * @param command string from toolbar buttons\n   */\n  triggerCommand(command: string) {\n    this.execute.emit(command);\n  }\n\n  /**\n   * highlight editor buttons when cursor moved or positioning\n   */\n  triggerButtons() {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.buttons.forEach(e => {\n      const result = this.doc.queryCommandState(e);\n      const elementById = this.doc.getElementById(e + '-' + this.id);\n      if (result) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * trigger highlight editor buttons when cursor moved or positioning in block\n   */\n  triggerBlocks(nodes: Node[]) {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\n    let found = false;\n    this.select.forEach(y => {\n      const node = nodes.find(x => x.nodeName === y);\n      if (node !== undefined && y === node.nodeName) {\n        if (found === false) {\n          this.block = node.nodeName.toLowerCase();\n          found = true;\n        }\n      } else if (found === false) {\n        this.block = 'default';\n      }\n    });\n\n    found = false;\n    if (this.customClasses) {\n      this.customClasses.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof Element) {\n            return x.className === y.class;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.customClassId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.customClassId = -1;\n        }\n      });\n    }\n\n    Object.keys(this.tagMap).map(e => {\n      const elementById = this.doc.getElementById(this.tagMap[e] + '-' + this.id);\n      const node = nodes.find(x => x.nodeName === e);\n      if (node !== undefined && e === node.nodeName) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n\n    this.foreColour = this.doc.queryCommandValue('ForeColor');\n    this.fontSize = this.doc.queryCommandValue('FontSize');\n    this.fontName = this.doc.queryCommandValue('FontName').replace(/\"/g, '');\n    this.backColor = this.doc.queryCommandValue('backColor');\n  }\n\n  /**\n   * insert URL link\n   */\n  insertUrl() {\n    const url = prompt('Insert URL link', 'https:\\/\\/');\n    if (url && url !== '' && url !== 'https://') {\n      this.editorService.createLink(url);\n    }\n  }\n\n  /**\n   * insert Video link\n   */\n  insertVideo() {\n    this.execute.emit('');\n    const url = prompt('Insert Video link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.insertVideo(url);\n    }\n  }\n\n  /** insert color */\n  insertColor(color: string, where: string) {\n    this.editorService.insertColor(color, where);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Name/family\n   * @param foreColor string\n   */\n  setFontName(foreColor: string): void {\n    this.editorService.setFontName(foreColor);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string): void {\n    this.editorService.setFontSize(fontSize);\n    this.execute.emit('');\n  }\n\n  /**\n   * toggle editor mode (WYSIWYG or SOURCE)\n   * @param m boolean\n   */\n  setEditorMode(m: boolean) {\n    const toggleEditorModeButton = this.doc.getElementById('toggleEditorMode' + '-' + this.id);\n    if (m) {\n      this.r.addClass(toggleEditorModeButton, 'active');\n    } else {\n      this.r.removeClass(toggleEditorModeButton, 'active');\n    }\n    this.htmlMode = m;\n  }\n\n  /**\n   * Upload image when file is selected\n   */\n  onFileChanged(event) {\n    const file = event.target.files[0];\n    if (file.type.includes('image/')) {\n        if (this.uploadUrl) {\n            this.editorService.uploadImage(file).subscribe(e => {\n              if (e instanceof HttpResponse) {\n                this.editorService.insertImage(e.body.imageUrl);\n                this.fileReset();\n              }\n            });\n        } else {\n          const reader = new FileReader();\n          reader.onload = (e: ProgressEvent) => {\n            const fr = e.currentTarget as FileReader;\n            this.editorService.insertImage(fr.result.toString());\n          };\n          reader.readAsDataURL(file);\n        }\n      }\n  }\n\n  /**\n   * Reset Input\n   */\n  fileReset() {\n    this.myInputFile.nativeElement.value = '';\n  }\n\n  /**\n   * Set custom class\n   */\n  setCustomClass(classId: number) {\n    this.editorService.createCustomClass(this.customClasses[classId]);\n  }\n}\n","import {\n  AfterViewInit, Attribute, ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef, HostBinding, HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AngularEditorConfig, angularEditorConfig} from './config';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {AngularEditorService} from './angular-editor.service';\nimport {DOCUMENT} from '@angular/common';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport { SecurityContext } from '@angular/core';\n\n@Component({\n  selector: 'angular-editor',\n  templateUrl: './angular-editor.component.html',\n  styleUrls: ['./angular-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AngularEditorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterViewInit {\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  modeVisual = true;\n  showPlaceholder = false;\n  disabled = false;\n  @Input() id = '';\n  @Input() config: AngularEditorConfig = angularEditorConfig;\n  @Input() placeholder = '';\n  @Input() tabIndex: number | null;\n\n  @Output() html;\n\n  @ViewChild('editor') textArea: any;\n  @ViewChild('editorWrapper') editorWrapper: any;\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\n\n  @Output() viewMode = new EventEmitter<boolean>();\n\n  /** emits `blur` event when focused out from the textarea */\n    // tslint:disable-next-line:no-output-native\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n\n  /** emits `focus` event when focused in to the textarea */\n    // tslint:disable-next-line:no-output-native\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  @HostBinding('attr.tabindex') tabindex = -1;\n  @HostListener('focus') onFocus() {\n    this.onEditorFocus();\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any,\n    private sanitizer: DomSanitizer,\n    private cdRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string\n  ) {\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnInit() {\n    if (this.config.defaultParagraphSeparator) {\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.editorToolbar.id = this.id;\n    this.config.toolbarPosition = this.config.toolbarPosition ? this.config.toolbarPosition : angularEditorConfig.toolbarPosition;\n    if (this.config.showToolbar !== undefined) {\n      this.editorToolbar.showToolbar = this.config.showToolbar;\n    }\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\n    this.editorToolbar.customClasses = this.config.customClasses;\n    this.editorToolbar.uploadUrl = this.config.uploadUrl;\n    this.editorService.uploadUrl = this.config.uploadUrl;\n    if (this.config.defaultFontName) {\n      this.editorToolbar.fontName = this.config.defaultFontName;\n      this.onEditorFocus();\n      this.editorService.setFontName(this.config.defaultFontName);\n    } else {\n      this.editorToolbar.fontName = 'Times New Roman';\n    }\n    if (this.config.defaultFontSize) {\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\n      this.onEditorFocus();\n      this.editorService.setFontSize(this.config.defaultFontSize);\n    }\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Executed command from editor header buttons\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    this.onEditorFocus();\n    if (command === 'toggleEditorMode') {\n      this.toggleEditorMode(this.modeVisual);\n    } else if (command !== '') {\n      if (command === 'default') {\n        this.editorService.removeSelectedElements('h1,h2,h3,h4,h5,h6,p,pre');\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\n      } else {\n        this.editorService.executeCommand(command);\n      }\n      this.exec();\n    }\n  }\n\n  /**\n   * focus event\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n  }\n\n  /**\n   * @description fires when cursor leaves textarea\n   */\n  public onTextAreaMouseOut(event: MouseEvent): void {\n    this.editorService.saveSelection();\n  }\n\n  /**\n   * blur event\n   */\n  onTextAreaBlur(event: FocusEvent) {\n    /**\n     * save selection if focussed out\n     */\n    this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\n    this.blur.emit('blur');\n    }\n  }\n\n  /**\n   *  focus the text area when the editor is focussed\n   */\n  onEditorFocus() {\n    if (this.modeVisual) {\n      this.textArea.nativeElement.focus();\n    } else {\n      const sourceText = this.doc.getElementById('sourceText');\n      sourceText.focus();\n    }\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(this.config.sanitize || this.config.sanitize === undefined ?\n        this.sanitizer.sanitize(SecurityContext.HTML, html) : html);\n      if ((!html || html === '<br>' || html === '') !== this.showPlaceholder) {\n        this.togglePlaceholder(this.showPlaceholder);\n      }\n    }\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\n      this.togglePlaceholder(this.showPlaceholder);\n    }\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this.r.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: boolean): void {\n    if (!value) {\n      this.r.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = true;\n\n    } else {\n      this.r.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = false;\n    }\n  }\n\n  /**\n   * Implements disabled state for this element\n   *\n   * @param isDisabled Disabled flag\n   */\n  setDisabledState(isDisabled: boolean): void {\n    const div = this.textArea.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this.r[action](div, 'disabled');\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * toggles editor mode based on bToSource bool\n   *\n   * @param bToSource A boolean value from the editor\n   */\n  toggleEditorMode(bToSource: boolean) {\n    let oContent: any;\n    const editableElement = this.textArea.nativeElement;\n\n    if (bToSource) {\n      oContent = this.doc.createTextNode(editableElement.innerHTML);\n      editableElement.innerHTML = '';\n\n      const oPre = this.doc.createElement('pre');\n      oPre.setAttribute('style', 'margin: 0; outline: none;');\n      const oCode = this.doc.createElement('code');\n      editableElement.contentEditable = false;\n      oCode.id = 'sourceText';\n      oCode.setAttribute('style', 'display:block; white-space: pre-wrap; word-break:' +\n        ' keep-all; margin: 0; outline: none; background-color: #fff5b9;');\n      oCode.contentEditable = 'true';\n      oCode.appendChild(oContent);\n      oPre.appendChild(oCode);\n      editableElement.appendChild(oPre);\n\n      this.doc.execCommand('defaultParagraphSeparator', false, 'div');\n\n      this.modeVisual = false;\n      this.viewMode.emit(false);\n      oCode.focus();\n    } else {\n      if (this.doc.querySelectorAll) {\n        editableElement.innerHTML = editableElement.innerText;\n      } else {\n        oContent = this.doc.createRange();\n        oContent.selectNodeContents(editableElement.firstChild);\n        editableElement.innerHTML = oContent.toString();\n      }\n      editableElement.contentEditable = true;\n      this.modeVisual = true;\n      this.viewMode.emit(true);\n      this.onContentChange(editableElement.innerHTML);\n      editableElement.focus();\n    }\n    this.editorToolbar.setEditorMode(!this.modeVisual);\n  }\n\n  /**\n   * toggles editor buttons when cursor moved or positioning\n   *\n   * Send a node array from the contentEditable of the editor\n   */\n  exec() {\n    this.editorToolbar.triggerButtons();\n\n    let userSelection;\n    if (this.doc.getSelection) {\n      userSelection = this.doc.getSelection();\n      this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n    }\n\n    let a = userSelection.focusNode;\n    const els = [];\n    while (a && a.id !== 'editor') {\n      els.unshift(a);\n      a = a.parentNode;\n    }\n    this.editorToolbar.triggerBlocks(els);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {AngularEditorComponent} from './angular-editor.component';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\n})\nexport class AngularEditorModule {\n}\n"]}